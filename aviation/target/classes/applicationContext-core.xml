<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx.xsd">

        <!--1.自动扫描com.xr.ssm包下的类-->
        <context:component-scan base-package="com.xr.ava"></context:component-scan>
        <!--2.开启注解-->
        <mvc:annotation-driven></mvc:annotation-driven>
        <!--3.静态资源-->
        <mvc:default-servlet-handler></mvc:default-servlet-handler>
        <mvc:resources mapping="/js/**" location="/js/"></mvc:resources>
        <mvc:resources mapping="/css/**" location="/css/"></mvc:resources>
        <mvc:resources mapping="/assets/**" location="/assets/"></mvc:resources>
        <mvc:resources mapping="/font/**" location="/font"></mvc:resources>
        <mvc:resources mapping="/images/**" location="/images"></mvc:resources>

        <!--1.加载为外部配置文件db.properties-->
    <!--1.加载外部配置文件db.properties-->
    <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>


    <!--配置数据源：druid-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driverClass}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="filters" value="${jdbc.filters}"></property>
        <!--配置连接池-->
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${pool.maxActive}" />
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${pool.initialSize}" />
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${pool.minIdle}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${pool.maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${pool.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${pool.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${pool.validationQuery}" />
        <property name="testWhileIdle" value="${pool.testWhileIdle}" />
        <property name="testOnBorrow" value="${pool.testOnBorrow}" />
        <property name="testOnReturn" value="${pool.testOnReturn}" />
        <property name="maxOpenPreparedStatements" value="${pool.maxOpenPreparedStatements}" />
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="${pool.removeAbandoned}" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="${pool.removeAbandonedTimeout}" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="${pool.logAbandoned}" />
    </bean>

        <!--2.配置sqlsessionfactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--6.1 引入数据源-->
        <property name="dataSource" ref="dataSource"></property>
        <!--6.2 加载映射文件-->
        <property name="mapperLocations" value="classpath*:mappers/*.xml"></property>
        <!-- 配置MyBatis的配置的文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
    </bean>


        <!--3.将sqlSesstionFactory注入dao层-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <property name="basePackage" value="com.xr.ava.dao"></property>
    </bean>

        <!--4.配置事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

        <!--开启事务注解-->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>










</beans>